{"version":3,"sources":["TaskView.jsx","App.js","reportWebVitals.js","index.js"],"names":["TaskView","props","completedClicked","task","completed","forceUpdate","state","shouldStrikethrough","console","log","name","assert","this","className","type","checked","onClick","x","onRemoveButtonClick","index","React","Component","tasks","App","addTask","push","document","getElementById","value","criteria","setState","removeTask","taskIndex","filter","parseInt","showOnlyCompleted","showAll","taskList","children","i","child","id","showTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"yPACaA,EAAb,kDAEI,WAAYC,GACX,IAAD,8BACI,cAAMA,IAQVC,iBAAmB,WAEf,EAAKD,MAAME,KAAKC,WAAa,EAAKH,MAAME,KAAKC,UAC7C,EAAKC,eAVL,EAAKC,MAAQ,CACTC,oBAAqB,EAAKN,MAAME,KAAKC,WAEzCI,QAAQC,IAAI,0BAA4B,EAAKR,MAAME,KAAKO,MACxDF,QAAQG,OAAO,EAAKL,MAAMC,sBAAwB,EAAKN,MAAME,KAAKC,WANtE,EAHJ,0CAiBI,WACC,IAAD,OACQA,EAAYQ,KAAKX,MAAME,KAAKC,UAOhC,OANAI,QAAQC,IAAI,aAAeL,GACf,qBAAIS,UAAU,OAAd,UAAqB,6BAC7B,uBAAOC,KAAK,WAAWC,QAASX,EAAWY,QAASJ,KAAKV,qBACzD,6BAAKE,EAAY,iCAASQ,KAAKX,MAAME,KAAKO,OAAiBE,KAAKX,MAAME,KAAKO,OAC3E,6BAAI,wBAAQM,QAAS,SAAAC,GAAC,OAAE,EAAKhB,MAAMiB,oBAAoB,EAAKjB,MAAMkB,QAA9D,wBAxBhB,GAA8BC,IAAMC,WCGhCC,EAAQ,GAuEGC,E,kDAnEb,aACC,IAAD,8BACE,gBAMFC,QAAU,WACRF,EAAMG,KACJ,CAACf,KAAMgB,SAASC,eAAe,eAAeC,MAC9CxB,WAAW,EACXyB,SAAU,EAAKvB,MAAMuB,WAEvB,EAAKC,SAAS,CACdR,MAAMA,EACNO,SAAS,EAAKvB,MAAMuB,WAGtBH,SAASC,eAAe,eAAeC,MAAQ,IAlB/C,EAoBFG,WAAa,SAACC,GACZV,EAAQA,EAAMW,QAAO,SAAChB,EAAEE,GAAH,OAAaA,IAAUe,SAASF,MACrD,EAAKF,SAAS,CACdR,MAAMA,EACNO,SAAS,EAAKvB,MAAMuB,YAxBpB,EA2BFM,kBAAoB,WAClB,EAAKL,SAAS,CACdR,MAAMA,EAAMW,QAAO,SAAA9B,GAAI,OAAIA,EAAKC,gBA7BhC,EAgCFgC,QAAU,WACR,EAAKN,SAAS,CACZR,MAAOA,KAhCP,EAAKhB,MAAQ,CACXgB,MAAO,GACPO,SAAU,OAJd,E,6CAqCF,SAAUQ,GAEN,IAAIC,EAAW,GACf,IAAK,IAAMC,KAAKF,EAChB,CACI,IAAIG,EAAQ,cAAC,EAAD,CAAUrB,MAAOoB,EAAGrB,oBAAqBN,KAAKmB,WAAY5B,KAAMkC,EAASE,KACrFD,EAASb,KAAKe,GAQlB,OANY,gCACR,kCACKF,EACD,6BAAI,gC,oBAKd,WASE,OANA,sBAAKG,GAAG,MAAR,UACE,uCACC7B,KAAK8B,UAAU9B,KAAKN,MAAMgB,OAC3B,uBAAOR,KAAK,OAAO2B,GAAG,gBAAsB,wBAAQzB,QAASJ,KAAKY,QAAtB,eAC5C,wBAAQR,QAASJ,KAAKwB,QAAtB,iBAA2C,wBAAQpB,QAASJ,KAAKuB,kBAAtB,8B,GA/D/Bf,IAAMC,WCMTsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAASC,eAAe,SAM1BgB,M","file":"static/js/main.57e7a77d.chunk.js","sourcesContent":["import React from 'react'\r\nexport class TaskView extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            shouldStrikethrough: this.props.task.completed\r\n        };\r\n        console.log(\"Initializing with task \" + this.props.task.name);\r\n        console.assert(this.state.shouldStrikethrough === this.props.task.completed);\r\n    }\r\n    // When a task is completed, add a strikethrough.\r\n    completedClicked = () =>\r\n    {\r\n        this.props.task.completed = !this.props.task.completed;\r\n        this.forceUpdate();\r\n    }\r\n    render()\r\n    {\r\n        let completed = this.props.task.completed;\r\n        console.log(\"Completed \" + completed);\r\n        const jsx = <tr className=\"task\"><td>\r\n            <input type=\"checkbox\" checked={completed} onClick={this.completedClicked}></input></td>\r\n            <td>{completed ? <strike>{this.props.task.name}</strike> : this.props.task.name}</td>\r\n            <td><button onClick={x=>this.props.onRemoveButtonClick(this.props.index)}>X</button></td>\r\n        </tr>;\r\n        return jsx;\r\n    }\r\n}","\r\nimport './App.css';\r\nimport {TaskView} from './TaskView'\r\nimport React from 'react';\r\nvar tasks = [];\r\n\r\nclass App extends React.Component\r\n{\r\n  constructor()\r\n  {\r\n    super();\r\n    this.state = {\r\n      tasks: [],\r\n      criteria: \"All\"\r\n    }\r\n  }\r\n  addTask = () => {\r\n    tasks.push(\r\n      {name: document.getElementById(\"taskTextbox\").value,\r\n      completed: false,\r\n      criteria: this.state.criteria\r\n      });\r\n    this.setState({\r\n    tasks:tasks,\r\n    criteria:this.state.criteria\r\n  });\r\n\r\n  document.getElementById(\"taskTextbox\").value = \"\";\r\n}\r\nremoveTask = (taskIndex) => {\r\n  tasks = tasks.filter((x,index) => index !== parseInt(taskIndex));\r\n  this.setState({\r\n  tasks:tasks,\r\n  criteria:this.state.criteria\r\n});\r\n}\r\nshowOnlyCompleted = () => {\r\n  this.setState({\r\n  tasks:tasks.filter(task => task.completed)\r\n});\r\n}\r\nshowAll = () => {\r\n  this.setState({\r\n    tasks: tasks\r\n  })\r\n}\r\nshowTasks(taskList)\r\n{\r\n    let children = [];\r\n    for (const i in taskList)\r\n    {\r\n        let child = <TaskView index={i} onRemoveButtonClick={this.removeTask} task={taskList[i]}></TaskView>;\r\n        children.push(child);\r\n    }\r\n    let table = <table>\r\n        <tbody>\r\n            {children}\r\n            <tr><td></td></tr>\r\n        </tbody>\r\n    </table>;\r\n    return table;\r\n  }\r\n  render()\r\n  {\r\n    const jsx = \r\n    <div id=\"App\">\r\n      <h1>Todos</h1>\r\n      {this.showTasks(this.state.tasks)}\r\n      <input type=\"text\" id=\"taskTextbox\"></input><button onClick={this.addTask}>+</button>\r\n      <button onClick={this.showAll}>All</button><button onClick={this.showOnlyCompleted}>Completed</button>\r\n    </div>\r\n    return jsx;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}